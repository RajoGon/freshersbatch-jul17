package com.springtest.hibernate;

import java.util.List;

import org.hibernate.Cache;
import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.LogicalExpression;
import org.hibernate.criterion.Restrictions;
import org.jgroups.stack.Retransmitter;

import com.springtest.hibernate.entity.Employee;
import com.springtest.hibernate.entity.Product;

/**
 * Hello world!
 *
 */
public class App 
{
    public static void main( String[] args )
    {
    	//Configure hibernate by reading config file
    	Configuration config=new Configuration();
    	config.configure("hibernate.cfg.xml");
    	//Create a session factory object through configured object
    	SessionFactory sessionFactory = config.buildSessionFactory();
   // 	insert(sessionFactory);
 //   	getAll(sessionFactory);
//    	update(sessionFactory);
//    	getAll(sessionFactory);
//    	findSpecific(sessionFactory);
//    	deleteData(sessionFactory);
    	getTotalSal(sessionFactory);
    	sessionFactory.close();
    }
    
    public static void insert(SessionFactory sessionFactory){
    	//Different queries
    	Session session = sessionFactory.openSession();
    	Transaction tobj = session.beginTransaction();
    	Product p1 = new Product("Laptop", 1000);
    	session.save(p1);	
    	tobj.commit();
    	session.close();
    	
    	session = sessionFactory.openSession();
    	tobj = session.beginTransaction();
    	Product p2 = new Product("TV", 2000);
    	session.save(p2);
    	tobj.commit();
    	session.close();
    	
    	session = sessionFactory.openSession();
    	tobj = session.beginTransaction();
    	Product p3 = new Product("M", 7000);
    	session.save(p3);
    	tobj.commit();
    	session.close();
    	
    	session = sessionFactory.openSession();
    	tobj = session.beginTransaction();
    	SQLQuery query = session.createSQLQuery("INSERT INTO PRODUCT_MASTER(P_ID,NAME,COST) VALUES(newseq.nextval,'AC',20000)");
    	query.executeUpdate();
    	tobj.commit();
    	session.close();
    	
    	System.out.println("Data inserted Successfully");
    }
    
    
    public static void getAll(SessionFactory sessionFactory){
    	//Different queries
    	Session session = sessionFactory.openSession();
    	Transaction tobj = session.beginTransaction();
    	Query query = session.createQuery("from Product");
    	List<Product> products = query.list();
    	products.stream().forEach(System.out::println);
    	//Commit and close
    	tobj.commit();
    	session.close();
    	System.out.println("Data found Successfully");
    }
    
    
    public static void update(SessionFactory sessionFactory){
    	//Different queries
    	Session session = sessionFactory.openSession();
    	Transaction tobj = session.beginTransaction();
    	Product p = session.load(Product.class, 2L);
    	p.setName("UpdatedTV");
    	//Commit and close
    	tobj.commit();
    	session.close();
    	System.out.println("Data updated Successfully");
    }
    
    public static void deleteData(SessionFactory sessionFactory){
    	//Different queries
    	Session session = sessionFactory.openSession();
    	Transaction tobj = session.beginTransaction();
    	Product p = session.load(Product.class, 2L);
    	session.delete(p);
    	//Commit and close
    	tobj.commit();
    	session.close();
    	System.out.println("Data deleted Successfully");
    }
    
    
    public static void findSpecific(SessionFactory sessionFactory){
    	//Different queries
    	Session session = sessionFactory.openSession();
    	Transaction tobj = session.beginTransaction();
    	Query query = session.createQuery("from Product where name= :name");
    	query.setString("name", "Laptop");
    	Product p = (Product) query.uniqueResult();
    	System.out.println(p);
    	//Commit and close
    	tobj.commit();
    	session.close();
    	System.out.println("LAPTOP FOUND Successfully");
    }
    public static void getTotalSal(SessionFactory sessionFactory){
    	//Different queries
    	Session session = sessionFactory.openSession();
    	Transaction tobj = session.beginTransaction();
    	Cache cache = sessionFactory.getCache();
    	session.clear();
    	cache.evictAllRegions();
    	//A.	Find total salary of all employees.
    	Query query = session.createQuery("Select sum(salary) from Employee ");
    	System.out.println("Total sal = "+query.list());
    	//B.	List down all employees ordered by their salary. Try with both HQL & Criteria.
    	Query query2 = session.createQuery(" from Employee order by salary ");
    	System.out.println("Odered "+query2.list());
    	//C.	Group the employees based upon their city.
    	Query query3 = session.createQuery("Select city,sum(salary) from Employee group by city ");
    	System.out.println("City Group "+ query3.list().stream().forEach(System.out::println));
    	//D.	Calculate the average salary of employees.
    	Query query4 = session.createQuery("Select avg(salary) from Employee");
    	System.out.println("Avg Sal "+query4.list());
    	//E.	List down employees having salary more than 1000.
    	Query query5 = session.createQuery(" from Employee where salary > 1000");
    	System.out.println("10000+ Sal "+query5.list());
    	//F.	Configure all above queries as Named queries inside entity using annotation & read the HQL from there.
    	Query query6 = session.getNamedQuery("sumSal");
    	System.out.println("Sum sal named query "+query6.list());
    	//Criteria sal>750 and less than 1000
    	Criteria c0 = session.createCriteria(Employee.class); 
    	Criterion c1 = Restrictions.gt("salary","750");
    	Criterion c2 = Restrictions.lt("salary","1000");
    	LogicalExpression andExp = Restrictions.and(c1,c2);
    	c0.add(andExp);
    	System.out.println("Criteria "+c0.list());
    	//Commit and close
    	tobj.commit();
    	session.close();
    	System.out.println("Data found Successfully");
    }
    
}
