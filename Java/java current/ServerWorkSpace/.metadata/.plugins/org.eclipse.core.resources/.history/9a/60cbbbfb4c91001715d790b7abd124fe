package com.springmongo.dao;

import java.net.UnknownHostException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.MongoDbFactory;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.BasicQuery;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.orm.hibernate5.support.HibernateDaoSupport;
import org.springframework.transaction.annotation.Transactional;

import com.mongodb.MongoClient;
import com.springmongo.collection.UserCollection;
import com.springmongo.collection.UserLoginCollection;
import com.springmongo.entity.User;
import com.springmongo.entity.UserLogin;
import com.springmongo.repository.UserLoginRepository;
import com.springmongo.repository.UserRepository;

public class UserDaoImplementation extends HibernateDaoSupport implements UserDao{
	static SimpleDateFormat dateFormat = new SimpleDateFormat();
	@Autowired
	UserRepository userRepository;
	
	
	
	@Autowired
	UserLoginRepository userLoginRepository;
	@Transactional
	public User createuser(User user) {
		System.out.println("in dao");
	
		getHibernateTemplate().save(user);
		User createdUser = getHibernateTemplate().load(User.class, user.getUserId());
		return createdUser;
	}
	@Transactional
	public UserLoginCollection loginUser(UserLogin userLogin) {
		System.out.println("in dao"+userLogin);		
		org.hibernate.Query q = getHibernateTemplate().getSessionFactory().getCurrentSession().createQuery("from User where userName=:userId and password=:pass");
		q.setParameter("userId", userLogin.getUserName());
		q.setParameter("pass", userLogin.getPassword());

		User loggedInUser = (User) q.list().get(0);
			if(loggedInUser!=null){
				UserLoginCollection loggedIn = new UserLoginCollection();
				loggedIn.setUserName(loggedInUser.getUserName());
				loggedIn.setId(generateToken());
				loggedIn.setLastUpdated(dateFormat.format(new Date()));
				getHibernateTemplate().save(loggedIn);
				return loggedIn;
			}else{
				return null;
			}

	}
	public String logoutUser(String token) {
		org.hibernate.Query q = getHibernateTemplate().getSessionFactory().getCurrentSession().createQuery("Delete from UserLoginCollection where id=:authToken ");
		q.setParameter("authToken", token);
		int deleteSession = q.executeUpdate();

		if(deleteSession!=0){
			
			return "success";
		}else{
			return "failed";
		}
	}
	public UserCollection getUser(String uname) {
		UserCollection userCollection = userRepository.getUser(uname);
		if(userCollection!=null){
			
			return userCollection;
		}else{
			return null;
		
		}
	}
	
	
	public static String generateToken(){
		String SALTCHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
        StringBuilder salt = new StringBuilder();
        Random rnd = new Random();
        while (salt.length() < 18) { // length of the random string.
            int index = (int) (rnd.nextFloat() * SALTCHARS.length());
            salt.append(SALTCHARS.charAt(index));
            salt.append(System.currentTimeMillis());
        }
        String saltStr = salt.toString();
        return saltStr;
		
	}

}
