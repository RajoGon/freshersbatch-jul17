package com.testthread;

import java.awt.*;
import java.awt.event.*;
import java.util.concurrent.locks.ReentrantLock;

public class OvalMovementTemplate2 extends Frame implements Runnable {

	int y1 = 400, y2 = 400, y3 = 400;
	static volatile boolean flag1 = false;
	static volatile boolean flag2 = false;
	static volatile boolean flag3 = false;
	static boolean down1 = false;
	static boolean down2 = false;
	static boolean down3 = false;
	Thread t1;
	Thread t2;
	Thread t3;
	
	public OvalMovementTemplate2() {
		super("Oval Game");
		this.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				System.exit(0);
			}
		});
		
		t1=new Thread(this);
		t2=new Thread(this);
		t3=new Thread(this);
		t1.setName("Ball1");
		t2.setName("Ball2");
		t3.setName("Ball3");
		t1.start();
		t2.start();
		t3.start();
		
	}
	
	
	
	public void paint(Graphics g) {
		g.setColor(Color.RED);
		g.fillOval(100, y1, 50, 50);
		g.setColor(Color.GREEN);
		g.fillOval(200, y2, 50, 50);
		g.setColor(Color.BLUE);
		g.fillOval(300, y3, 50, 50);
	}
	
	public static void main(String args[]) {
		Frame om = new OvalMovementTemplate2();
		om.setSize(600, 600);
		om.setBackground(Color.CYAN);
		om.setVisible(true);
	}
	public void changePosition1() {
		
		if(y1==50) {
			down1 = true;
			waitForAll();
		}
		else if(y1==400) {
			down1 = false;
			waitForAll();
		}
		
		if(down1 == false){
			y1 = y1-5;
		}
		else if(down1 == true) {
			y1 = y1+5;
		}
		
		
		try {
			Thread.sleep(10);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

		this.repaint();
	}
	public void changePosition2() {
		
		if(y2==50) {
			down2 = true;
			waitForAll();
		}
		else if(y2==400) {
			down2 = false;
			waitForAll();
		}
		
		if(down2 == false){
			y2 = y2-2;
		}
		else if(down2 == true) {
			y2 = y2+2;
		}
		
		
		try {
			Thread.sleep(10);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

		this.repaint();
	}
	public void changePosition3() {
		
		if(y3==50) {
			down3 = true;
			notifyToAll();
		}
		else if(y3==400) {
			down3 = false;
			notifyToAll();
		}
		
		if(down3 == false){
			y3 = y3-1;
		}
		else if(down3 == true) {
			y3 = y3+1;
		}
		
		
		try {
			Thread.sleep(10);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

		this.repaint();
	}
	ReentrantLock lock = new ReentrantLock(); 
	public void waitForAll() {
		lock.lock(); 
		try {
			wait();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
//		
//		if(down1 == true && down2 == true && down3 == true) {
//			System.out.println("All ready");
//			notifyAll();
//		}
							
	}
	synchronized public void notifyToAll() {
		notifyAll();
	}


	@Override
	public void run() {
		
		Thread currentthread = Thread.currentThread();
		if(currentthread.getName().equals("Ball1")) {
			for(;;) {
				changePosition1();
			}
		}else if(currentthread.getName().equals("Ball2")) {
			System.out.println("Starting");
			for(;;) {
				changePosition2();
			}
		}
		else if(currentthread.getName().equals("Ball3")) {
			System.out.println("Starting");
			for(;;) {
				changePosition3();
			}
			}
		
	}
}
