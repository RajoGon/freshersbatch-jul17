package com.collections;

import java.util.*;
class Person implements Comparable<Person>{
	public int height;
	public int weight;
	public String name;
	Person(int height, int weight, String name){
		this.height = height;
		this.weight = weight;
		this.name = name;
	}
	public int compareTo(Person Pt){

		if(this.height == Pt.height){
			return 0;
		}
		else if(this.height > Pt.height){
			return 1;
		}
		else{
			return -1;
		}
	}
	public String toString() {
		return this.name+" weighs, "+ this.weight +" and is "+this.height+ " tall.";
	}
}

class WeightCompare implements Comparator<Person>{
	public int compare(Person o1,Person o2){
		if(o1.weight == o2.weight){
			return 0;
		}
		else if(o1.weight > o2.weight){
			return 1;
		}
		else{
			return -1;
		}
	}
}


class NameCompare implements Comparator<Person>{
	public int compare(Person o1,Person o2){
		return o1.name.compareTo(o2.name);
	}
}

public class Comparing{
	public static void main(String[] args) {

		Person P[] = new Person[5];
		P[0] = new Person(2,32,"AB");
		P[1] = new Person(4,71,"AC");
		P[2] = new Person(1,23,"M");
		P[3] = new Person(7,11,"E");
		P[4] = new Person(5,9,"F");
		TreeSet<Person> heightWise =new TreeSet<Person>(); 
		heightWise.add(P[0]);
		heightWise.add(P[1]);
		heightWise.add(P[2]);
		heightWise.add(P[3]);
		heightWise.add(P[4]);
		System.out.println("Height wise");
		Iterator itr = heightWise.iterator();
		while(itr.hasNext()) {
			System.out.println(itr.next());
		}
		TreeSet<Person> weighttWise =new TreeSet<Person>(new WeightCompare()); 
		weighttWise.add(P[0]);
		weighttWise.add(P[1]);
		weighttWise.add(P[2]);
		weighttWise.add(P[3]);
		weighttWise.add(P[4]);
		System.out.println("Height wise");
		Iterator itr2 = weighttWise.iterator();
		while(itr2.hasNext()) {
			System.out.println(itr2.next());
		}
		
		TreeSet<Person>nameWise =new TreeSet<Person>(new NameCompare()); 
		nameWise.add(P[0]);
		nameWise.add(P[1]);
		nameWise.add(P[2]);
		nameWise.add(P[3]);
		nameWise.add(P[4]);
		System.out.println("Height wise");
		Iterator itr3 = nameWise.iterator();
		while(itr3.hasNext()) {
			System.out.println(itr3.next());
		}
		
	}
}